@page "/vote"
@rendermode InteractiveServer
@using DevOpsQuickScan.Domain
@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager Navigation

<h3>Vote Page</h3>

<input @bind="sessionId" placeholder="Session ID"/>
<button @onclick="JoinSession">Join</button>

<p>@statusMessage</p>

@if (_currentQuestion != null)
{
    <p>Question: @_currentQuestion.Text</p>
    <ul>
        @foreach (var answer in _currentQuestion.Answers)
        {
            <li>@answer.Text - <button @onclick="() => SubmitVote(answer.Id)">Vote</button></li>
        }
    </ul>
}
else
{
    <p>Waiting for question...</p>
}

@code {
    private HubConnection? hubConnection;
    private string sessionId = "";
    private string statusMessage = "";
    private Question _currentQuestion;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/hub/voting"))
            .WithAutomaticReconnect()
            .Build();

        hubConnection.On<Question>("ReceiveQuestion", async (question) =>
        {
            await InvokeAsync(() =>
            {
                _currentQuestion = question;
                StateHasChanged();
            });
        });

        await hubConnection.StartAsync();
    }

    private async Task JoinSession()
    {
        if (hubConnection is not null)
        {
            await hubConnection.InvokeAsync("JoinSession", sessionId);
            statusMessage = $"Joined session {sessionId}";
        }
    }

    private async Task SubmitVote(Guid answerId)
    {
        if (hubConnection is not null)
        {
            await hubConnection.InvokeAsync("SubmitVote", sessionId, new Vote(_currentQuestion.Id, answerId));
            statusMessage = $"You voted: {_currentQuestion.Answers.FirstOrDefault(q => q.Id == answerId).Text}";
        }
    }
}
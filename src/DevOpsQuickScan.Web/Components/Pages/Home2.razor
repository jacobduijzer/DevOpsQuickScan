@page "/test"
@rendermode InteractiveServer
@using DevOpsQuickScan.Application
@using DevOpsQuickScan.Domain
@using DevOpsQuickScan.Infrastructure
@using Microsoft.AspNetCore.SignalR.Client
@inject ISessionStore SessionStore
@inject NavigationManager Navigation
@inject SurveyReader SurveyReader

<PageTitle>Home</PageTitle>

@if (!sessionStarted)
{
    <div class="quickscan-card">
        <div class="quickscan-card">
            <img src="@Assets["/img/logo.jpg"]" width="300" alt="DevOps Quickscan Logo" class="quickscan-logo"/>
            <h2 class="mb-4">Welcome to DevOps Quickscan</h2>
            <EditForm Model="this" OnValidSubmit="StartSession">
                <InputText class="form-control mb-3" @bind-Value="sessionName"/>
                <button type="submit" class="btn btn-primary w-100">Start Session</button>
            </EditForm>
        </div>
    </div>
}
else
{
    <div class="quickscan-card">
        <p>Your session name: <strong>@sessionName</strong></p>

        <div class="mt-3">
            <p>Invite your team:</p>
            <a href="@inviteLink">@inviteLink</a>
        </div>
        
        <p><b>Participants:</b></p>
        <ul>
            @foreach (var user in participants)
            {
                <li>@user</li>
            }
        </ul>

        @if (_survey != null)
        {
            <p><b>Survey: @_survey.Questions</b></p>
            <ul>
                @foreach (var question in _survey.Questions)
                {
                    <li>@question.Text -
                        <button @onclick="() => SendQuestion(question.Id)">Request vote</button>
                        (@GetNumberOfVotes(question.Id))
                    </li>
                }
            </ul>
        }
    </div>
}

@code {
    private HubConnection? hubConnection;
    private string sessionId = "";
    private string sessionName;
    private string inviteLink;
    private bool sessionStarted = false;
    private HashSet<string> participants = new();
    private HashSet<Vote> votes = new();
    private DevOpsQuickScan.Domain.Survey _survey;

    private async Task StartSession()
    {
        sessionStarted = true;
        
        var code = SessionStore.CreateSession(sessionName);
        inviteLink = Navigation.BaseUri + $"join?session={code}";

        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/hub/voting"))
            .WithAutomaticReconnect()
            .Build();

        hubConnection.On<string>("ParticipantJoined", async (userId) =>
        {
            await InvokeAsync(() =>
            {
                participants.Add(userId);
                StateHasChanged();
            });
        });

        hubConnection.On<string>("ParticipantLeft", async (userId) =>
        {
            await InvokeAsync(() =>
            {
                participants.Remove(userId);
                StateHasChanged();
            });
        });

        hubConnection.On<Vote>("VoteReceived", async (vote) =>
        {
            await InvokeAsync(() =>
            {
                votes.Add(vote);
                StateHasChanged();
            });
        });

        await hubConnection.StartAsync();
        await hubConnection.InvokeAsync("StartSession", sessionId);
        await hubConnection.InvokeAsync("JoinSession", sessionId);

        _survey = await SurveyReader.Read(Path.Combine("Surveys", "survey-01.json"));
    }

    private async Task SendQuestion(Guid questionId)
    {
        var question = _survey.Questions.FirstOrDefault(q => q.Id == questionId);
        await hubConnection.InvokeAsync("SendQuestion", question);
    }

    private int GetNumberOfVotes(Guid questionId)
    {
        if (!votes.Any() || !votes.Any(x => x.QuestionId == questionId))
            return 0;

        return votes.Count(v => v.QuestionId == questionId);
    }

}

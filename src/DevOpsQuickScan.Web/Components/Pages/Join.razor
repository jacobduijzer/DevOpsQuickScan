@page "/join"
@rendermode InteractiveServer
@using DevOpsQuickScan.Application
@using DevOpsQuickScan.Domain
@using Microsoft.AspNetCore.SignalR.Client
@inject ISessionStore SessionStore
@inject NavigationManager Navigation

<h3>Join a DevOps Quickscan</h3>

@if (string.IsNullOrEmpty(sessionName))
{
    <p class="text-danger">Invalid or expired session code.</p>
}
else if (!joined)
{
    <p>You’re about to join session: <strong>@sessionName</strong></p>

    <EditForm Model="this" OnValidSubmit="JoinSession" FormName="Name">
        <InputText class="form-control mb-3" @bind-Value="userName" placeholder="Enter your name" />
        <button type="submit" class="btn btn-primary">Join Session</button>
    </EditForm>
}
else
{
    <h4>Welcome, @userName!</h4>
    <p>You’ve joined: <strong>@sessionName</strong></p>

    <p>@statusMessage</p>

    @if (_currentQuestion != null)
    {
        <p>Question: @_currentQuestion.Text</p>
        <ul>
            @foreach (var answer in _currentQuestion.Answers)
            {
                <li>
                    @answer.Text -
                    <button @onclick="() => SubmitVote(answer.Id)">Vote</button>
                </li>
            }
        </ul>
    }
    else
    {
        <p>Waiting for question...</p>
    }
}

@code {
    [Parameter]
    [SupplyParameterFromQuery]
    public string? session { get; set; }

    private string? sessionName;
    private string sessionId = "";
    private string userName;
    private bool joined = false;
    private HubConnection? hubConnection;
    private string statusMessage = "";
    private Question? _currentQuestion;

    protected override async Task OnInitializedAsync()
    {
       
    }

    private async Task JoinSession()
    {
        if (!string.IsNullOrWhiteSpace(session))
        {
            sessionId = session;
            sessionName = SessionStore.GetSessionName(session);
        }

        hubConnection = new HubConnectionBuilder()
            .WithUrl(Navigation.ToAbsoluteUri("/hub/voting"))
            .WithAutomaticReconnect()
            .Build();

        hubConnection.On<Question>("ReceiveQuestion", async (question) =>
        {
            await InvokeAsync(() =>
            {
                _currentQuestion = question;
                StateHasChanged();
            });
        });

        await hubConnection.StartAsync();
        
        if (!string.IsNullOrWhiteSpace(userName) && hubConnection is not null)
        {
            await hubConnection.InvokeAsync("JoinSession", sessionId, userName);
            statusMessage = $"Joined session {sessionId} as {userName}";
            
            
            joined = true;
        }
    }

    private async Task SubmitVote(Guid answerId)
    {
        if (hubConnection is not null && _currentQuestion != null)
        {
            await hubConnection.InvokeAsync("SubmitVote", sessionId, new Vote(_currentQuestion.Id, answerId));
            var answer = _currentQuestion.Answers.FirstOrDefault(q => q.Id == answerId);
            statusMessage = $"You voted: {answer?.Text}";
        }
    }
}
@page "/"
@using DevOpsQuickScan.Core
@inject UserIdService UserId
@inject SessionService Session

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>

Welcome to your new app, person with id @_userId.

@if (Session.CurrentQuestion != null)
{
    <div class="question-block" style="margin-bottom: 1.5rem;">
        <strong>@Session.CurrentQuestion.Text</strong>
        <ul>
            @foreach (var answer in Session.CurrentQuestion.Answers)
            {
                bool isSelected = answer.Id == selectedAnswer;
                <button class="answer-button @(isSelected ? "selected" : "")"
                        @onclick="@(() => SelectAnswer(answer))"
                        disabled="@hasSubmitted">
                    @answer.Text
                </button>
            }
            
            <div style="margin-top: 1rem;">
                <button @onclick="SubmitAnswer"
                        disabled="@(!CanSubmit)">
                    Submit Answer
                </button>
            </div>

            @if (hasSubmitted)
            {
                <p><em>Waiting for results…</em></p>
            }
            
        </ul>
    </div>
}
else
{
    <p>No question is currently being asked.</p>
}

@code {

    private string? _userId = null;
    private int? selectedAnswer;
    private bool hasSubmitted = false;
    private bool CanSubmit => selectedAnswer is not null && !hasSubmitted;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        _userId = await UserId.GetAsync();
        
        if (Session.HasAnsweredCurrentQuestion(_userId!))
        {
            selectedAnswer = Session.GetAnswer(_userId!);
            hasSubmitted = true;
        }
        
        await InvokeAsync(StateHasChanged);
        
        
        
    }

    protected override async Task OnInitializedAsync()
    {
        // is current question answered by me?
        Session.OnQuestionChanged += async () =>
        {
            selectedAnswer = null;
            hasSubmitted = false;
            await InvokeAsync(StateHasChanged);
        }; 

        // var state = Session.GetParticipantState(userId);
        // selectedAnswer = state?.SelectedAnswer;
        // hasSubmitted = state?.HasSubmitted ?? false;

        
        // Session.OnQuestionChanged += async () =>
        // {
        //     // _currentQuestion = Session.CurrentQuestion;
        //     await InvokeAsync(StateHasChanged);
        // };
    }
    
    private void SelectAnswer(Answer answer)
    {
        if (!hasSubmitted)
            selectedAnswer = answer.Id;
    }

    private void SubmitAnswer()
    {
        if (hasSubmitted || selectedAnswer is null) return;
        
        Session.AnswerQuestion(_userId!, selectedAnswer.Value);
        hasSubmitted = true;
    }

}
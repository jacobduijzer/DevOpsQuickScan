@page "/facilitator"
@using DevOpsQuickScan.Core
@using Microsoft.AspNetCore.Server.HttpSys
@inject QuestionsService Questions
@inject UserIdService UserId
@inject SessionService Session

<PageTitle>Facilitation</PageTitle>

<h2>Facilitator Panel</h2>
<p>User / Session Id: @_userId</p>

@foreach (var question in _questions!)
{
    <div class="question-block" style="margin-bottom: 1.5rem;">
        <strong>@question.Text</strong>
        <ul>
            @foreach (var answer in question.Answers)
            {
                var count = Session.Submissions.Count(x => x.QuestionId == question.Id && x.AnswerId == answer.Id); 
                
                <div>
                    <label>@answer.Text (@count)</label>
                    <div style="background: lightblue; width:@(count * 20)px; height: 20px;"></div>
                </div>
            }
        </ul>
        <button @onclick="() => AskQuestion(question)">Ask</button>
        <button @onclick="() => RevealAnswers(question)">Reveal</button>
        <button>Reset (TODO)</button>
    </div>
}

@code {
    private string? _userId = null;
    private List<Question>? _questions = [];

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        _userId = await UserId.GetAsync();
        await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnInitializedAsync()
    {
        _questions = Questions.All;
        // await InvokeAsync(StateHasChanged);
        
        Session.OnAnswerReceived += async () =>
        {
            // selectedAnswer = null;
            // hasSubmitted = false;
            await InvokeAsync(StateHasChanged);
        };
    }

    private void AskQuestion(Question question)
    {
        Session.CurrentQuestion = question;
        // Session.Answers.Clear();
    }

    private void RevealAnswers(Question question)
    {
        // LastResults = Session.Answers
        // .GroupBy(kvp => kvp.Value)
        // .ToDictionary(g => g.Key, g => g.Count());
    }

}
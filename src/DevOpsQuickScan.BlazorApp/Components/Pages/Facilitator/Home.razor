@page "/facilitator"
@using DevOpsQuickScan.Core
@using DevOpsQuickScan.BlazorApp.Components.Partials
@inject UserIdService UserId
@inject SessionService Session

<PageTitle>Facilitation</PageTitle>

@foreach (var category in Session.Questions.Select(q => q.Category).Distinct())
{
    <div class="container px-4 py-5" id="featured-3">
        <h2 class="pb-2 border-bottom border-primary">@category</h2>
            @foreach (var question in Session.Questions.Where(c => c.Category.Equals(category)))
            {
                <div class="question-block" style="margin-bottom: 1.5rem;">
                    @{ _revealedQuestion = Session.RevealedQuestion(question.Id); }
                    <FacilitatorQuestionComponent RevealedQuestion="@_revealedQuestion"
                                                  OnQuestionAsked="AskQuestion"
                                                  OnAnswersRevealed="RevealAnswers"
                                                  OnResetQuestion="ResetQuestion"/>


                </div>
            }
    </div>
}

@code {

    private string? _userId;
    private bool _initialized = false;

    private RevealedQuestion? _revealedQuestion;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender && !_initialized)
        {
            _userId = await UserId.GetAsync();
            _initialized = true;
            Session.Remove(_userId);
            StateHasChanged(); 
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await Session.Initialize();

        Session.OnAnswerReceived += async (revealedQuestion) =>
        {
            _revealedQuestion = revealedQuestion;
            await InvokeAsync(StateHasChanged);
        };
    }

    private void AskQuestion(Question question) =>
        Session.AskQuestion(question.Id);

    private void RevealAnswers(Question question) =>
        Session.RevealQuestion(question.Id);

    private void ResetQuestion(Question question) =>
        Session.ResetQuestion(question.Id);

}
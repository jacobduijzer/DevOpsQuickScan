@page "/facilitator"
@using DevOpsQuickScan.Core
@using DevOpsQuickScan.BlazorApp.Components.Partials
@inject QuestionsService Questions
@inject UserIdService UserId
@inject SessionService Session

<PageTitle>Facilitation</PageTitle>

<h2>Facilitator Panel</h2>
<p>User / Session Id: @_userId</p>

@foreach (var question in _questions!)
{
    <div class="question-block" style="margin-bottom: 1.5rem;">
        
        <RevealComponent Question="@question" SessionService="@Session" />
        
        <button @onclick="() => AskQuestion(question)" disabled="@question.IsRevealed">Ask</button>
        <button @onclick="() => RevealAnswers(question)">Reveal</button>
        <button @onclick="() => ResetQuestion(question)">Reset </button>
    </div>
}

@code {
    private string? _userId = null;
    private List<Question>? _questions = [];

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        _userId = await UserId.GetAsync();
        await InvokeAsync(StateHasChanged);
    }

    protected override async Task OnInitializedAsync()
    {
        _questions = Questions.All;
        
        Session.OnAnswerReceived += async () =>
            await InvokeAsync(StateHasChanged);
    }

    private void AskQuestion(Question question)
    {
        Session.CurrentQuestion = question;
    }

    private void RevealAnswers(Question question)
    {
        Questions.RevealQuestion(question.Id);
        Session.RevealQuestion(question.Id);
    }
    
    private void ResetQuestion(Question question)
    {
        Questions.ResetQuestion(question.Id);
        Session.ResetQuestion(question.Id);
    }
}
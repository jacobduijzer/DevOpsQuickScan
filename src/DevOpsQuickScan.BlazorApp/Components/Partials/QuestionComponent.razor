@using DevOpsQuickScan.Core

<div class="question-container">

    <!--// Question //-->
    <div class="question-card">
        <h3>@Question.Text <a href="@Question.Link" target="_blank"><i class="fa-solid fa-circle-info"></i></a></h3>
    </div>

    <!--// Answers //-->
    <div class="answers-list mt-4">
        <ul class="list-group">
            @foreach (var answer in @Question.Answers)
            {
                bool isSelected = answer.Id == _selectedAnswer;
                <li class="list-group-item">
                    <button class="answer-button @(isSelected ? "selected" : "")"

                            @onclick="@(() => SelectAnswer(answer))"
                            disabled="@_hasSubmitted">
                        @answer.Text
                    </button>
                </li>
            }
        </ul>

        <div style="margin-top: 1rem;">
            <button @onclick="SubmitAnswer"
                    disabled="@(!CanSubmit)">
                Submit Answer
            </button>
        </div>

        @if (_hasSubmitted)
        {
            <p><em>Waiting for resultsâ€¦</em></p>
        }
    </div>
   
</div>

@code {

    [Parameter] public required Question Question { get; set; }
    [Parameter] public int? PreviousAnswer { get; set; }
    [Parameter] public required EventCallback<QuestionAnsweredDto> OnQuestionAnswered { get; set; }

    private int? _selectedAnswer;
    private bool _hasSubmitted = false;
    private bool CanSubmit => _selectedAnswer is not null && !_hasSubmitted;

    protected override void OnParametersSet()
    {
        _selectedAnswer = PreviousAnswer;
        _hasSubmitted = PreviousAnswer != null;
    }

    private void SelectAnswer(Answer answer)
    {
        if (!_hasSubmitted)
            _selectedAnswer = answer.Id;
    }

    private async Task SubmitAnswer()
    {
        await OnQuestionAnswered.InvokeAsync(new QuestionAnsweredDto(Question.Id, _selectedAnswer!.Value));
        _hasSubmitted = true;
    }

}
@using DevOpsQuickScan.Core


<div class="question-block" style="margin-bottom: 1.5rem;">
    <strong>@Question.Text</strong>
    <ul>
        @foreach (var answer in @Question.Answers)
        {
            bool isSelected = answer.Id == _selectedAnswer;
            <button class="answer-button @(isSelected ? "selected" : "")"
                    @onclick="@(() => SelectAnswer(answer))"
                    disabled="@_hasSubmitted">
                @answer.Text
            </button>
        }

        <div style="margin-top: 1rem;">
            <button @onclick="SubmitAnswer"
                    disabled="@(!CanSubmit)">
                Submit Answer
            </button>
        </div>

        @if (_hasSubmitted)
        {
            <p><em>Waiting for resultsâ€¦</em></p>
        }

    </ul>
</div>

@code {

    [Parameter] public required Question Question { get; set; }
    [Parameter] public int? PreviousAnswer { get; set; }
    [Parameter] public required EventCallback<QuestionAnsweredDto> OnQuestionAnswered { get; set; }

    private int? _selectedAnswer;
    private bool _hasSubmitted = false;
    private bool CanSubmit => _selectedAnswer is not null && !_hasSubmitted;
    
    protected override void OnParametersSet()
    {
        _selectedAnswer = PreviousAnswer;
        _hasSubmitted = PreviousAnswer != null;
    }

    private void SelectAnswer(Answer answer)
    {
        if (!_hasSubmitted)
            _selectedAnswer = answer.Id;
    }

    private async Task SubmitAnswer()
    {
        await OnQuestionAnswered.InvokeAsync(new QuestionAnsweredDto(Question.Id, _selectedAnswer!.Value));
        _hasSubmitted = true;
    }

}
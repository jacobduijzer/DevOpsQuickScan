@using DevOpsQuickScan.Core

<div class="card">
    <h5 class="card-header d-flex align-items-center">
        <span>Question</span>
        <span class="ms-auto d-flex align-items-center" style="font-size: 0.6em; color: #888;">
            <span class="me-2">@Question.Category</span>
            <a href="@Question.Link" target="_blank">
                <i class="fa-solid fa-circle-info"></i>
            </a>
        </span>
    </h5>
    <div class="card-body">
        <h5 class="card-title">@Question.Text </h5>
        <div class="list-group list-group-flush overflow-hidden">
            @foreach (var answer in @Question.Answers)
            {
                var isSelected = answer.Id == _selectedAnswer;
                
                <label class="card-text list-group-item d-flex justify-content-between align-items-center option-item @(isSelected ? "selected" : "")">
                    <span class="flex-grow-1">@answer.Text</span>
                    <input class="form-check-input me-3"
                           type="radio"
                           name="answer"
                           value="@answer.Id"
                           checked="@isSelected"
                           disabled="@_hasSubmitted"
                           @onclick="@(() => SelectAnswer(answer))" />
                </label>
            }
        </div> 
    </div>
    
    <div class="card-footer text-end">
        @if (!_hasSubmitted)
        {
            <button class="btn btn-primary"
                    @onclick="SubmitAnswer"
                    disabled="@(!CanSubmit)">
                Submit Answer
            </button>
        }
        else 
        {
            <span><em>Answer submitted, waiting for resultsâ€¦</em></span>
        }
    </div>
</div>

   

@code {

    [Parameter] public required Question Question { get; set; }
    [Parameter] public int? PreviousAnswer { get; set; }
    [Parameter] public required EventCallback<QuestionAnsweredDto> OnQuestionAnswered { get; set; }

    private int? _selectedAnswer;
    private bool _hasSubmitted = false;
    private bool CanSubmit => _selectedAnswer is not null && !_hasSubmitted;

    protected override void OnParametersSet()
    {
        _selectedAnswer = PreviousAnswer;
        _hasSubmitted = PreviousAnswer != null;
    }

    private void SelectAnswer(Answer answer)
    {
        if (!_hasSubmitted)
            _selectedAnswer = answer.Id;
    }

    private async Task SubmitAnswer()
    {
        await OnQuestionAnswered.InvokeAsync(new QuestionAnsweredDto(Question.Id, _selectedAnswer!.Value));
        _hasSubmitted = true;
    }

}